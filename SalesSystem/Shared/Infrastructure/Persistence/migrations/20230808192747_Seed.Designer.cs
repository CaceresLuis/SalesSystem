// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalesSystem.Shared.Infrastructure;

#nullable disable

namespace SalesSystem.shared.infrastructure.persistence.migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230808192747_Seed")]
    partial class Seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "33dd9490-b282-442c-9c39-cf29438958cb",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a2b68619-72d3-4e06-9f76-8d1ecc4f8a8d",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "bd2883b5-77f0-424b-96cd-6ac5684a5ac7",
                            RoleId = "33dd9490-b282-442c-9c39-cf29438958cb"
                        },
                        new
                        {
                            UserId = "054e4b8e-41e6-4e56-8053-836e0e48bf56",
                            RoleId = "a2b68619-72d3-4e06-9f76-8d1ecc4f8a8d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SalesSystem.Modules.Buys.Domain.Buy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBuy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a81a774-05df-4050-917e-e10076f7196e"),
                            UserId = "bd2883b5-77f0-424b-96cd-6ac5684a5ac7"
                        },
                        new
                        {
                            Id = new Guid("f9d82921-5531-426f-971e-241f6074a920"),
                            UserId = "054e4b8e-41e6-4e56-8053-836e0e48bf56"
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Categories.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("693e5cc1-cb3d-48c4-b2a0-9fa39d71e236"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6654),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Electrónica",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9b17e98a-3caa-4b39-8bd2-2a0276f82bff"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6664),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Ropa y Accesorios",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6786fe63-0bcb-4ec0-9021-ec33280b92ee"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6667),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Hogar y Decoración",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("30f14cb8-c302-4726-abe4-2879f19de710"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6669),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Belleza y Cuidado Personal",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9f0d86b1-de22-4b78-86fe-cd6d789a04f3"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6672),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Deportes y Aire Libre",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("12b37f05-6e66-4ea3-bb69-db2ccb6336d4"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6692),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juguetes y Juegos",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d7dbf899-3414-48a5-83c4-b481346bc4bd"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6695),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Libros y Entretenimiento",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b04aed84-2e64-45c4-8e12-2c791c32c745"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6697),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Alimentación y Bebidas",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c0a7d006-79dd-42c9-9870-06b133379100"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6699),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Salud y Bienestar",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3c06e5c4-2eaf-47e8-831f-4db013d321c2"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6703),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Automóviles y Motocicletas",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.ProductCategories.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = new Guid("693e5cc1-cb3d-48c4-b2a0-9fa39d71e236"),
                            ProductId = new Guid("cc2bb4bc-afa1-4885-85d8-bf06f30df65c")
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = new Guid("693e5cc1-cb3d-48c4-b2a0-9fa39d71e236"),
                            ProductId = new Guid("c985b233-8abd-4fe6-8aff-c726403d83fe")
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = new Guid("693e5cc1-cb3d-48c4-b2a0-9fa39d71e236"),
                            ProductId = new Guid("de6ee507-3556-4590-b07a-4863d1734f2a")
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = new Guid("9b17e98a-3caa-4b39-8bd2-2a0276f82bff"),
                            ProductId = new Guid("83533894-3f1b-41a4-a2eb-209df1794e45")
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = new Guid("9b17e98a-3caa-4b39-8bd2-2a0276f82bff"),
                            ProductId = new Guid("fe573588-ab29-4ef8-bf41-0a9b8d957039")
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = new Guid("9b17e98a-3caa-4b39-8bd2-2a0276f82bff"),
                            ProductId = new Guid("cb591e57-012b-4a61-86a4-ba405fd7200a")
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = new Guid("6786fe63-0bcb-4ec0-9021-ec33280b92ee"),
                            ProductId = new Guid("64ab19bb-6f95-4faf-8eeb-3f653c5de3be")
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = new Guid("6786fe63-0bcb-4ec0-9021-ec33280b92ee"),
                            ProductId = new Guid("445c33af-154f-4fa3-9ba0-5d4c1f5a7ae6")
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = new Guid("6786fe63-0bcb-4ec0-9021-ec33280b92ee"),
                            ProductId = new Guid("7f8f2e1c-6fe3-495a-a928-cd4cc358e672")
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = new Guid("30f14cb8-c302-4726-abe4-2879f19de710"),
                            ProductId = new Guid("f653cb8f-2225-45d3-b3a1-a745bf14223c")
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = new Guid("30f14cb8-c302-4726-abe4-2879f19de710"),
                            ProductId = new Guid("fb9a4a25-4d10-4393-9ad8-54b1ad8e2b6e")
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = new Guid("30f14cb8-c302-4726-abe4-2879f19de710"),
                            ProductId = new Guid("f1c626f4-8b63-4b31-9c9b-376b53fc8a31")
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = new Guid("9f0d86b1-de22-4b78-86fe-cd6d789a04f3"),
                            ProductId = new Guid("c7ce60e1-0c54-4986-8aa1-8a2c48632169")
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = new Guid("9f0d86b1-de22-4b78-86fe-cd6d789a04f3"),
                            ProductId = new Guid("7bf65104-2f90-4a74-9ccd-f24fcf043ed3")
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = new Guid("9f0d86b1-de22-4b78-86fe-cd6d789a04f3"),
                            ProductId = new Guid("6e4af7f1-1834-4172-80cb-423a17f53156")
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = new Guid("12b37f05-6e66-4ea3-bb69-db2ccb6336d4"),
                            ProductId = new Guid("9375d24c-ac8d-4ed0-ac0a-c9a74a8d7c10")
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = new Guid("12b37f05-6e66-4ea3-bb69-db2ccb6336d4"),
                            ProductId = new Guid("86c185af-6c8a-4d65-8432-3b55d4cefda3")
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = new Guid("12b37f05-6e66-4ea3-bb69-db2ccb6336d4"),
                            ProductId = new Guid("90a53564-89a6-4b00-9c69-3eae19238c7c")
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = new Guid("d7dbf899-3414-48a5-83c4-b481346bc4bd"),
                            ProductId = new Guid("91e69c7b-d3d6-42a9-a50a-0034215c9307")
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = new Guid("d7dbf899-3414-48a5-83c4-b481346bc4bd"),
                            ProductId = new Guid("33104112-4553-45cd-ad22-92f4a5aa65cb")
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = new Guid("d7dbf899-3414-48a5-83c4-b481346bc4bd"),
                            ProductId = new Guid("de1eecb2-0aa9-4ce9-a77b-bd47511e6c12")
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = new Guid("b04aed84-2e64-45c4-8e12-2c791c32c745"),
                            ProductId = new Guid("7faf6a1f-624d-4ad6-ac67-9dadf68004d5")
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = new Guid("b04aed84-2e64-45c4-8e12-2c791c32c745"),
                            ProductId = new Guid("24322aa9-981e-4b68-98fd-b20adb4ede8c")
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = new Guid("b04aed84-2e64-45c4-8e12-2c791c32c745"),
                            ProductId = new Guid("693d1fd0-e20a-4a70-9ad3-48f0d4e9702e")
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = new Guid("c0a7d006-79dd-42c9-9870-06b133379100"),
                            ProductId = new Guid("4b515335-7056-496c-b9ac-2a0267a15260")
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = new Guid("c0a7d006-79dd-42c9-9870-06b133379100"),
                            ProductId = new Guid("6e1ed3bb-bb35-4575-b95b-769ad20f3011")
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = new Guid("c0a7d006-79dd-42c9-9870-06b133379100"),
                            ProductId = new Guid("672dde91-593d-419e-8378-2b492dc949ec")
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = new Guid("3c06e5c4-2eaf-47e8-831f-4db013d321c2"),
                            ProductId = new Guid("b53a0e27-0012-4e3f-b9db-ce90b870ad22")
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = new Guid("3c06e5c4-2eaf-47e8-831f-4db013d321c2"),
                            ProductId = new Guid("ae7e70df-c20f-4e72-b0df-986163a188c9")
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = new Guid("3c06e5c4-2eaf-47e8-831f-4db013d321c2"),
                            ProductId = new Guid("dfe60aa0-ec1a-4c67-b766-bbb5439e90a7")
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Products.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Stock")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc2bb4bc-afa1-4885-85d8-bf06f30df65c"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6740),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Smartphone Samsung Galaxy S22",
                            Price = 525m,
                            Stock = 255,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c985b233-8abd-4fe6-8aff-c726403d83fe"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6750),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Laptop HP Pavilion 16",
                            Price = 1500m,
                            Stock = 210,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("de6ee507-3556-4590-b07a-4863d1734f2a"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6752),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Auriculares inalámbricos Sony WH-1000XM4",
                            Price = 120m,
                            Stock = 520,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("83533894-3f1b-41a4-a2eb-209df1794e45"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6758),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Camiseta de algodón con estampado floral",
                            Price = 40m,
                            Stock = 41,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fe573588-ab29-4ef8-bf41-0a9b8d957039"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6760),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Pantalones vaqueros de corte ajustado",
                            Price = 25m,
                            Stock = 210,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cb591e57-012b-4a61-86a4-ba405fd7200a"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6764),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Bolso de cuero genuino con diseño elegante",
                            Price = 30m,
                            Stock = 50,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("64ab19bb-6f95-4faf-8eeb-3f653c5de3be"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6766),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de muebles de sala en tonos neutros",
                            Price = 720m,
                            Stock = 78,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("445c33af-154f-4fa3-9ba0-5d4c1f5a7ae6"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6768),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de sábanas de algodón con diseño moderno",
                            Price = 255m,
                            Stock = 39,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7f8f2e1c-6fe3-495a-a928-cd4cc358e672"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6771),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Lámpara de mesa de estilo industrial",
                            Price = 120m,
                            Stock = 55,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f653cb8f-2225-45d3-b3a1-a745bf14223c"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6775),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Set de maquillaje profesional de alta gama",
                            Price = 156m,
                            Stock = 52,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fb9a4a25-4d10-4393-9ad8-54b1ad8e2b6e"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6777),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Perfume floral y fresco para mujer",
                            Price = 85m,
                            Stock = 75,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f1c626f4-8b63-4b31-9c9b-376b53fc8a31"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6782),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Cepillo alisador de cabello con tecnología iónica",
                            Price = 175m,
                            Stock = 19,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c7ce60e1-0c54-4986-8aa1-8a2c48632169"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6784),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Bicicleta de montaña todoterreno",
                            Price = 350m,
                            Stock = 98,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7bf65104-2f90-4a74-9ccd-f24fcf043ed3"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6787),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Ropa deportiva para running, incluye camiseta y pantalones cortos",
                            Price = 355m,
                            Stock = 64,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6e4af7f1-1834-4172-80cb-423a17f53156"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6789),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Tienda de campaña resistente al agua para 4 personas",
                            Price = 423m,
                            Stock = 27,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9375d24c-ac8d-4ed0-ac0a-c9a74a8d7c10"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6791),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de construcción LEGO Classic",
                            Price = 135m,
                            Stock = 155,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("86c185af-6c8a-4d65-8432-3b55d4cefda3"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6794),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Peluche suave y tierno de animalito",
                            Price = 45m,
                            Stock = 525,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("90a53564-89a6-4b00-9c69-3eae19238c7c"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6797),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de mesa estratégico \"Catan\"",
                            Price = 120m,
                            Stock = 85,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("91e69c7b-d3d6-42a9-a50a-0034215c9307"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6800),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Novela de suspenso \"La Chica del Tren\" de Paula Hawkins",
                            Price = 25m,
                            Stock = 320,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("33104112-4553-45cd-ad22-92f4a5aa65cb"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6805),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "CD de la banda sonora original de una película popular",
                            Price = 21m,
                            Stock = 485,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("de1eecb2-0aa9-4ce9-a77b-bd47511e6c12"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6807),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Videojuego de aventuras \"The Legend of Zelda: Breath of the Wild\"",
                            Price = 55m,
                            Stock = 785,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7faf6a1f-624d-4ad6-ac67-9dadf68004d5"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6858),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Selección de chocolates gourmet de diferentes países",
                            Price = 12m,
                            Stock = 528,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("24322aa9-981e-4b68-98fd-b20adb4ede8c"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6861),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Caja de té variado con sabores exóticos",
                            Price = 25m,
                            Stock = 740,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("693d1fd0-e20a-4a70-9ad3-48f0d4e9702e"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6863),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Vino tinto reserva de una bodega reconocida",
                            Price = 128m,
                            Stock = 196,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4b515335-7056-496c-b9ac-2a0267a15260"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6865),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Set de suplementos vitamínicos para la salud general",
                            Price = 129m,
                            Stock = 504,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6e1ed3bb-bb35-4575-b95b-769ad20f3011"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6868),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Dispositivo de seguimiento de actividad física y sueño",
                            Price = 98m,
                            Stock = 127,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("672dde91-593d-419e-8378-2b492dc949ec"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6870),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Mascarilla facial de cuidado intensivo con ingredientes naturales",
                            Price = 234m,
                            Stock = 529,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b53a0e27-0012-4e3f-b9db-ce90b870ad22"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6875),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Kit de limpieza y cuidado automotriz de calidad profesional",
                            Price = 359m,
                            Stock = 74,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ae7e70df-c20f-4e72-b0df-986163a188c9"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6879),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Funda de asiento de cuero para automóvil",
                            Price = 75m,
                            Stock = 56,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dfe60aa0-ec1a-4c67-b766-bbb5439e90a7"),
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 47, 68, DateTimeKind.Utc).AddTicks(6881),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Casco de motocicleta de diseño aerodinámico y alta seguridad",
                            Price = 125m,
                            Stock = 142,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bd2883b5-77f0-424b-96cd-6ac5684a5ac7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92ce6918-9943-467f-983d-36132f73bfbf",
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 46, 912, DateTimeKind.Utc).AddTicks(1640),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Luis@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Luis",
                            IsDeleted = false,
                            IsUpdated = false,
                            LastName = "Caceres",
                            LockoutEnabled = true,
                            NormalizedEmail = "LUIS@MAIL.COM",
                            NormalizedUserName = "LUIS@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENGW4RsNkZV/2kahC+7TeLBxf3h27k0ICDX6dusvWUar24kD0TQh8YSoSjjb2oWqCQ==",
                            PhoneNumber = "7588-5214",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "542c73ea-23b8-4c78-b526-fd5c35bef806",
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Luis@mail.com"
                        },
                        new
                        {
                            Id = "054e4b8e-41e6-4e56-8053-836e0e48bf56",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c43e4fa-a7fa-4a52-a6c2-e7c18af5377a",
                            CreateAt = new DateTime(2023, 8, 8, 19, 27, 46, 912, DateTimeKind.Utc).AddTicks(1663),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Steven@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            IsDeleted = false,
                            IsUpdated = false,
                            LastName = "Caceres",
                            LockoutEnabled = true,
                            NormalizedEmail = "STEVEN@MAIL.COM",
                            NormalizedUserName = "STEVEN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOmvpw+QF4EBiluhgKLfmQASp7mMzCYVI+3MINkdszsbr/tGVsjPEtBV5o/w4kC+dw==",
                            PhoneNumber = "7588-5214",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7669c0de-fe05-4811-842c-5a5255386bcf",
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Steven@mail.com"
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserAddres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressSpecific")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddres");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpiredDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerCard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesSystem.Modules.Buys.Domain.Buy", b =>
                {
                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("Buys")
                        .HasForeignKey("ProductId");

                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.CartItem", b =>
                {
                    b.HasOne("SalesSystem.Modules.Carts.Domain.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("SalesSystem.Modules.Carts.Domain.Cart", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.ProductCategories.Domain.ProductCategory", b =>
                {
                    b.HasOne("SalesSystem.Modules.Categories.Domain.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserAddres", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("UserAddres")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserCard", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.Categories.Domain.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SalesSystem.Modules.Products.Domain.Product", b =>
                {
                    b.Navigation("Buys");

                    b.Navigation("CartItems");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("UserAddres");

                    b.Navigation("UserCards");
                });
#pragma warning restore 612, 618
        }
    }
}
