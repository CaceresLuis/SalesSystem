// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalesSystem.Shared.Infrastructure;

#nullable disable

namespace SalesSystem.shared.infrastructure.persistence.migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230817034006_TempUserCart")]
    partial class TempUserCart
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c506c0ae-d06e-4d5d-a57d-433c63245883",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cbbaac48-603d-4004-907b-f9fb1020309c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "93bd6f5d-6af9-45b1-b996-ee198fb746ab",
                            RoleId = "c506c0ae-d06e-4d5d-a57d-433c63245883"
                        },
                        new
                        {
                            UserId = "7a39b716-9943-4abc-accf-8783b13c18af",
                            RoleId = "cbbaac48-603d-4004-907b-f9fb1020309c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SalesSystem.Modules.Buys.Domain.Buy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBuy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.TempCartItem", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<Guid>("TempUser")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("TempCartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7464b959-6dab-420e-bd6a-48075a76b1e2"),
                            UserId = "93bd6f5d-6af9-45b1-b996-ee198fb746ab"
                        },
                        new
                        {
                            Id = new Guid("5dbfb477-a824-4a34-a815-78bd860d476d"),
                            UserId = "7a39b716-9943-4abc-accf-8783b13c18af"
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Categories.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f755e198-179c-4791-92be-a6b4f2359b8b"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4329),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Electrónica",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a463d0fe-1ed9-4165-bf9b-a76c6f012cfd"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4339),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Ropa y Accesorios",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("36739425-1f4b-4eac-843c-0afb7ae019a0"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4342),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Hogar y Decoración",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1e2ad49d-7a99-4ad5-9f75-45bca7c4db77"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4344),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Belleza y Cuidado Personal",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e5cb1954-be90-4594-8db6-3eac4f6fdf52"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4357),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Deportes y Aire Libre",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("3ea92e81-dd91-4bda-88b8-025bf4e19bb0"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4374),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juguetes y Juegos",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d5e1613b-61bc-4583-8cad-d05818b9ab8e"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4376),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Libros y Entretenimiento",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("afd4f956-fc03-408c-8f2f-c348bb583184"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4378),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Alimentación y Bebidas",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("645fdc3a-b59e-44d9-8b1b-803571621af9"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4380),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Salud y Bienestar",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fa2c0a85-c2f7-4ebd-95a0-511d74e95cca"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4384),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Automóviles y Motocicletas",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.ProductCategories.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = new Guid("f755e198-179c-4791-92be-a6b4f2359b8b"),
                            ProductId = new Guid("c92afc07-b66c-437e-81ed-208a9d8d02ba")
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = new Guid("f755e198-179c-4791-92be-a6b4f2359b8b"),
                            ProductId = new Guid("c5d547c0-cdc1-43c3-b273-6df9f26b9410")
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = new Guid("f755e198-179c-4791-92be-a6b4f2359b8b"),
                            ProductId = new Guid("837fcb93-492c-4808-8121-f8b8a2ceec0f")
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = new Guid("a463d0fe-1ed9-4165-bf9b-a76c6f012cfd"),
                            ProductId = new Guid("71c645cc-6bfe-4f0e-9262-aaaf09d368a5")
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = new Guid("a463d0fe-1ed9-4165-bf9b-a76c6f012cfd"),
                            ProductId = new Guid("38772743-0756-4077-ad8d-40c34f7279e7")
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = new Guid("a463d0fe-1ed9-4165-bf9b-a76c6f012cfd"),
                            ProductId = new Guid("a814df1f-461e-43b9-99c6-2bdfa0e93de1")
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = new Guid("36739425-1f4b-4eac-843c-0afb7ae019a0"),
                            ProductId = new Guid("2f72df20-229f-44be-ba2f-6b8e344cb690")
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = new Guid("36739425-1f4b-4eac-843c-0afb7ae019a0"),
                            ProductId = new Guid("b9f73587-1dee-4477-959c-f0b3b29d2098")
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = new Guid("36739425-1f4b-4eac-843c-0afb7ae019a0"),
                            ProductId = new Guid("dde91dc3-296a-4707-98c0-74edfba5b570")
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = new Guid("1e2ad49d-7a99-4ad5-9f75-45bca7c4db77"),
                            ProductId = new Guid("82a42560-99aa-48b0-8a58-e43b68c25e4f")
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = new Guid("1e2ad49d-7a99-4ad5-9f75-45bca7c4db77"),
                            ProductId = new Guid("dc0c5b56-5689-410d-bc24-24c9cd103113")
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = new Guid("1e2ad49d-7a99-4ad5-9f75-45bca7c4db77"),
                            ProductId = new Guid("b1941ffa-9f4b-4a4d-8b96-ebf9830b9ed7")
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = new Guid("e5cb1954-be90-4594-8db6-3eac4f6fdf52"),
                            ProductId = new Guid("5f3b91ca-feb4-4ac0-bc78-b7b789ceea62")
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = new Guid("e5cb1954-be90-4594-8db6-3eac4f6fdf52"),
                            ProductId = new Guid("d7cc4571-67fb-4358-bf3c-56e7448c1f23")
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = new Guid("e5cb1954-be90-4594-8db6-3eac4f6fdf52"),
                            ProductId = new Guid("71a124f3-136d-4f40-95c2-945b5b3edf01")
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = new Guid("3ea92e81-dd91-4bda-88b8-025bf4e19bb0"),
                            ProductId = new Guid("26520101-3a7a-4e33-99b3-165d0a0b9436")
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = new Guid("3ea92e81-dd91-4bda-88b8-025bf4e19bb0"),
                            ProductId = new Guid("4ea174ca-fc53-456e-bf9a-49eb1b871010")
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = new Guid("3ea92e81-dd91-4bda-88b8-025bf4e19bb0"),
                            ProductId = new Guid("f05c8368-94f4-4293-878a-a96ee27047b0")
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = new Guid("d5e1613b-61bc-4583-8cad-d05818b9ab8e"),
                            ProductId = new Guid("7a7ecb1e-c7f9-47ac-bf8e-5ee76e6ce623")
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = new Guid("d5e1613b-61bc-4583-8cad-d05818b9ab8e"),
                            ProductId = new Guid("ab6cfb55-0836-486a-bdbb-c416ca73d98b")
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = new Guid("d5e1613b-61bc-4583-8cad-d05818b9ab8e"),
                            ProductId = new Guid("878e6080-c5a3-428e-a030-0031c6e80dcd")
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = new Guid("afd4f956-fc03-408c-8f2f-c348bb583184"),
                            ProductId = new Guid("091dafe0-7e5a-47d1-bdd5-9871ca447c93")
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = new Guid("afd4f956-fc03-408c-8f2f-c348bb583184"),
                            ProductId = new Guid("7cfbe4d7-1e5d-4797-bbf7-af19a03920be")
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = new Guid("afd4f956-fc03-408c-8f2f-c348bb583184"),
                            ProductId = new Guid("ff579eb7-6313-4ae1-97e4-d550ea9065eb")
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = new Guid("645fdc3a-b59e-44d9-8b1b-803571621af9"),
                            ProductId = new Guid("d7c93dda-e972-4bc6-b69b-e7e0ffe2ec1b")
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = new Guid("645fdc3a-b59e-44d9-8b1b-803571621af9"),
                            ProductId = new Guid("56ba067d-63c5-4dc4-b880-47737cf00b1d")
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = new Guid("645fdc3a-b59e-44d9-8b1b-803571621af9"),
                            ProductId = new Guid("b7b7cb67-09b9-40b3-90ef-386ce01f8f71")
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = new Guid("fa2c0a85-c2f7-4ebd-95a0-511d74e95cca"),
                            ProductId = new Guid("ce88b4d5-d95d-4993-96ff-fd346a56eb37")
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = new Guid("fa2c0a85-c2f7-4ebd-95a0-511d74e95cca"),
                            ProductId = new Guid("658655e0-2126-41af-8df7-e7cc34facdde")
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = new Guid("fa2c0a85-c2f7-4ebd-95a0-511d74e95cca"),
                            ProductId = new Guid("dcd48f9a-560b-424e-a8c6-da9978b07414")
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Products.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("Stock")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c92afc07-b66c-437e-81ed-208a9d8d02ba"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4433),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Smartphone Samsung Galaxy S22",
                            Price = 525m,
                            Stock = 255,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c5d547c0-cdc1-43c3-b273-6df9f26b9410"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4443),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Laptop HP Pavilion 16",
                            Price = 1500m,
                            Stock = 210,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("837fcb93-492c-4808-8121-f8b8a2ceec0f"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4450),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Auriculares inalámbricos Sony WH-1000XM4",
                            Price = 120m,
                            Stock = 520,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("71c645cc-6bfe-4f0e-9262-aaaf09d368a5"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4452),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Camiseta de algodón con estampado floral",
                            Price = 40m,
                            Stock = 41,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("38772743-0756-4077-ad8d-40c34f7279e7"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4454),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Pantalones vaqueros de corte ajustado",
                            Price = 25m,
                            Stock = 210,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a814df1f-461e-43b9-99c6-2bdfa0e93de1"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4458),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Bolso de cuero genuino con diseño elegante",
                            Price = 30m,
                            Stock = 50,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2f72df20-229f-44be-ba2f-6b8e344cb690"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4461),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de muebles de sala en tonos neutros",
                            Price = 720m,
                            Stock = 78,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b9f73587-1dee-4477-959c-f0b3b29d2098"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4463),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de sábanas de algodón con diseño moderno",
                            Price = 255m,
                            Stock = 39,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dde91dc3-296a-4707-98c0-74edfba5b570"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4466),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Lámpara de mesa de estilo industrial",
                            Price = 120m,
                            Stock = 55,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("82a42560-99aa-48b0-8a58-e43b68c25e4f"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4469),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Set de maquillaje profesional de alta gama",
                            Price = 156m,
                            Stock = 52,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dc0c5b56-5689-410d-bc24-24c9cd103113"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4475),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Perfume floral y fresco para mujer",
                            Price = 85m,
                            Stock = 75,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b1941ffa-9f4b-4a4d-8b96-ebf9830b9ed7"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4477),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Cepillo alisador de cabello con tecnología iónica",
                            Price = 175m,
                            Stock = 19,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("5f3b91ca-feb4-4ac0-bc78-b7b789ceea62"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4480),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Bicicleta de montaña todoterreno",
                            Price = 350m,
                            Stock = 98,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d7cc4571-67fb-4358-bf3c-56e7448c1f23"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4482),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Ropa deportiva para running, incluye camiseta y pantalones cortos",
                            Price = 355m,
                            Stock = 64,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("71a124f3-136d-4f40-95c2-945b5b3edf01"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4486),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Tienda de campaña resistente al agua para 4 personas",
                            Price = 423m,
                            Stock = 27,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("26520101-3a7a-4e33-99b3-165d0a0b9436"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4488),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de construcción LEGO Classic",
                            Price = 135m,
                            Stock = 155,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4ea174ca-fc53-456e-bf9a-49eb1b871010"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4491),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Peluche suave y tierno de animalito",
                            Price = 45m,
                            Stock = 525,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f05c8368-94f4-4293-878a-a96ee27047b0"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4632),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de mesa estratégico \"Catan\"",
                            Price = 120m,
                            Stock = 85,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7a7ecb1e-c7f9-47ac-bf8e-5ee76e6ce623"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4638),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Novela de suspenso \"La Chica del Tren\" de Paula Hawkins",
                            Price = 25m,
                            Stock = 320,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ab6cfb55-0836-486a-bdbb-c416ca73d98b"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4644),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "CD de la banda sonora original de una película popular",
                            Price = 21m,
                            Stock = 485,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("878e6080-c5a3-428e-a030-0031c6e80dcd"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4646),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Videojuego de aventuras \"The Legend of Zelda: Breath of the Wild\"",
                            Price = 55m,
                            Stock = 785,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("091dafe0-7e5a-47d1-bdd5-9871ca447c93"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4649),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Selección de chocolates gourmet de diferentes países",
                            Price = 12m,
                            Stock = 528,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7cfbe4d7-1e5d-4797-bbf7-af19a03920be"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4652),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Caja de té variado con sabores exóticos",
                            Price = 25m,
                            Stock = 740,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ff579eb7-6313-4ae1-97e4-d550ea9065eb"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4654),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Vino tinto reserva de una bodega reconocida",
                            Price = 128m,
                            Stock = 196,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d7c93dda-e972-4bc6-b69b-e7e0ffe2ec1b"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4657),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Set de suplementos vitamínicos para la salud general",
                            Price = 129m,
                            Stock = 504,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("56ba067d-63c5-4dc4-b880-47737cf00b1d"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4659),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Dispositivo de seguimiento de actividad física y sueño",
                            Price = 98m,
                            Stock = 127,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b7b7cb67-09b9-40b3-90ef-386ce01f8f71"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4664),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Mascarilla facial de cuidado intensivo con ingredientes naturales",
                            Price = 234m,
                            Stock = 529,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ce88b4d5-d95d-4993-96ff-fd346a56eb37"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4666),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Kit de limpieza y cuidado automotriz de calidad profesional",
                            Price = 359m,
                            Stock = 74,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("658655e0-2126-41af-8df7-e7cc34facdde"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4670),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Funda de asiento de cuero para automóvil",
                            Price = 75m,
                            Stock = 56,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("dcd48f9a-560b-424e-a8c6-da9978b07414"),
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 737, DateTimeKind.Utc).AddTicks(4676),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Casco de motocicleta de diseño aerodinámico y alta seguridad",
                            Price = 125m,
                            Stock = 142,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "93bd6f5d-6af9-45b1-b996-ee198fb746ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d43c2d37-7167-4713-8f9c-d930f99f986a",
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 567, DateTimeKind.Utc).AddTicks(1362),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Luis@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Luis",
                            IsDeleted = false,
                            IsUpdated = false,
                            LastName = "Caceres",
                            LockoutEnabled = true,
                            NormalizedEmail = "LUIS@MAIL.COM",
                            NormalizedUserName = "LUIS@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJBfwcHnXM09w53eH74bKv3XIC5bk05qTuV8Eg8k0VfhSvU7MzVJmFTPKUTbifvH7w==",
                            PhoneNumber = "7588-5214",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "455dbdd5-65a8-48de-ae11-083352ba2038",
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Luis@mail.com"
                        },
                        new
                        {
                            Id = "7a39b716-9943-4abc-accf-8783b13c18af",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f72acdd5-a570-4311-b75a-ed3c97e7f82f",
                            CreateAt = new DateTime(2023, 8, 17, 3, 40, 5, 567, DateTimeKind.Utc).AddTicks(1385),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Steven@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            IsDeleted = false,
                            IsUpdated = false,
                            LastName = "Caceres",
                            LockoutEnabled = true,
                            NormalizedEmail = "STEVEN@MAIL.COM",
                            NormalizedUserName = "STEVEN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELgTBbYM6wZcZENVtLGLaJRwDeU53Krhbgn0JakmjfYDSsXc/yGMOS6XuPT/G97MIA==",
                            PhoneNumber = "7588-5214",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1928f58d-e995-4d71-bcdc-dc75fbe24d60",
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Steven@mail.com"
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserAddres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressSpecific")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddres");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpiredDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerCard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesSystem.Modules.Buys.Domain.Buy", b =>
                {
                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("Buys")
                        .HasForeignKey("ProductId");

                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.CartItem", b =>
                {
                    b.HasOne("SalesSystem.Modules.Carts.Domain.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.TempCartItem", b =>
                {
                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("SalesSystem.Modules.Carts.Domain.Cart", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.ProductCategories.Domain.ProductCategory", b =>
                {
                    b.HasOne("SalesSystem.Modules.Categories.Domain.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserAddres", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("UserAddres")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserCard", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.Categories.Domain.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SalesSystem.Modules.Products.Domain.Product", b =>
                {
                    b.Navigation("Buys");

                    b.Navigation("CartItems");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("UserAddres");

                    b.Navigation("UserCards");
                });
#pragma warning restore 612, 618
        }
    }
}
