// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalesSystem.Shared.Infrastructure;

#nullable disable

namespace SalesSystem.shared.infrastructure.persistence.migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3958470b-9398-4a82-82ab-ffb5bf79a7f5",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "56ab6f8b-35fb-49cd-856d-39d67fcc4a68",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cfbef3a1-333e-484f-b6ce-4f3f5d6c63ce",
                            RoleId = "3958470b-9398-4a82-82ab-ffb5bf79a7f5"
                        },
                        new
                        {
                            UserId = "9ca44540-450e-4c48-97c9-df5ab5ee88ee",
                            RoleId = "56ab6f8b-35fb-49cd-856d-39d67fcc4a68"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SalesSystem.Modules.Buys.Domain.Buy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBuy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Buys");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("790512c0-58a2-43e4-af02-dc110b86dd51"),
                            UserId = "cfbef3a1-333e-484f-b6ce-4f3f5d6c63ce"
                        },
                        new
                        {
                            Id = new Guid("515c175f-3808-42db-b843-1b5ab89a294c"),
                            UserId = "9ca44540-450e-4c48-97c9-df5ab5ee88ee"
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Categories.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3f6c2cb-084c-4037-93a2-eefda27d4e47"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2502),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Electrónica",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d0a72eac-45b1-4522-aeee-a55bb0c32a86"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2525),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Ropa y Accesorios",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b8a977ba-138e-4f5e-ac7a-b3af30b4337b"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2529),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Hogar y Decoración",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6398607b-7a6b-4521-996e-74bcfbb3fd51"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2534),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Belleza y Cuidado Personal",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ede711d-0e00-4190-a1e7-1a629625ce5f"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2557),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Deportes y Aire Libre",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("6990ff30-a496-4f7d-bb63-1e342a52a9d0"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2570),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juguetes y Juegos",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8b03b56d-b6be-46d6-87bf-2056a4d4047e"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2575),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Libros y Entretenimiento",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ddb8031-20bf-42a1-b309-04b0ab613aae"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2579),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Alimentación y Bebidas",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ef251957-ad4e-49b8-bf26-3003f6219904"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2583),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Salud y Bienestar",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0bf0847b-d6b4-4db7-b484-b26df76fb28a"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2590),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Automóviles y Motocicletas",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Images.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SalesSystem.Modules.ProductCategories.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = new Guid("b3f6c2cb-084c-4037-93a2-eefda27d4e47"),
                            ProductId = new Guid("6fa4ec16-d4b7-4911-8c27-ddafbeba3bca")
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = new Guid("b3f6c2cb-084c-4037-93a2-eefda27d4e47"),
                            ProductId = new Guid("a91470f3-d7eb-401d-9748-42b1eac343d8")
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = new Guid("b3f6c2cb-084c-4037-93a2-eefda27d4e47"),
                            ProductId = new Guid("bf6d0c96-1b7f-4c32-88ab-9386285ac732")
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = new Guid("d0a72eac-45b1-4522-aeee-a55bb0c32a86"),
                            ProductId = new Guid("b6b8357d-da2b-4b01-8aaf-1cd2821cfeef")
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = new Guid("d0a72eac-45b1-4522-aeee-a55bb0c32a86"),
                            ProductId = new Guid("52587219-25e8-4b74-8a90-5f566db822b4")
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = new Guid("d0a72eac-45b1-4522-aeee-a55bb0c32a86"),
                            ProductId = new Guid("9f4e3e8a-d329-4035-b9b5-aed7134e010f")
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = new Guid("b8a977ba-138e-4f5e-ac7a-b3af30b4337b"),
                            ProductId = new Guid("b6d4f303-dd86-4b13-8fef-5da04206dc6c")
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = new Guid("b8a977ba-138e-4f5e-ac7a-b3af30b4337b"),
                            ProductId = new Guid("8c6e6381-308d-47e3-b03d-c00c05e60829")
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = new Guid("b8a977ba-138e-4f5e-ac7a-b3af30b4337b"),
                            ProductId = new Guid("e6eece15-e7b2-4baa-a6a3-fb0ad481dede")
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = new Guid("6398607b-7a6b-4521-996e-74bcfbb3fd51"),
                            ProductId = new Guid("1ec7f116-cc7c-4450-aa87-792ac4b5ad6a")
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = new Guid("6398607b-7a6b-4521-996e-74bcfbb3fd51"),
                            ProductId = new Guid("fb4ea868-30ca-4e5f-8343-1dec213682a5")
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = new Guid("6398607b-7a6b-4521-996e-74bcfbb3fd51"),
                            ProductId = new Guid("9855e282-fbbf-48da-b4c7-28360a4d289a")
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = new Guid("1ede711d-0e00-4190-a1e7-1a629625ce5f"),
                            ProductId = new Guid("1be672cd-3664-4055-93cc-e59422fed135")
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = new Guid("1ede711d-0e00-4190-a1e7-1a629625ce5f"),
                            ProductId = new Guid("0b535a49-8f14-4cc9-b707-4ae6e0d0470d")
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = new Guid("1ede711d-0e00-4190-a1e7-1a629625ce5f"),
                            ProductId = new Guid("bd89d1ab-d43e-4030-81be-80bafd9db27f")
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = new Guid("6990ff30-a496-4f7d-bb63-1e342a52a9d0"),
                            ProductId = new Guid("134e84f1-decc-47d3-ae86-022a304218db")
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = new Guid("6990ff30-a496-4f7d-bb63-1e342a52a9d0"),
                            ProductId = new Guid("d0584496-48ac-42f3-bf12-cb76b464af97")
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = new Guid("6990ff30-a496-4f7d-bb63-1e342a52a9d0"),
                            ProductId = new Guid("65c76211-bc25-4bc6-9c5a-8b7139dd851a")
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = new Guid("8b03b56d-b6be-46d6-87bf-2056a4d4047e"),
                            ProductId = new Guid("e5daabef-d638-40c6-8278-8fdff3860b4c")
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = new Guid("8b03b56d-b6be-46d6-87bf-2056a4d4047e"),
                            ProductId = new Guid("850b80ad-b010-42ac-9315-a472aae8f68a")
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = new Guid("8b03b56d-b6be-46d6-87bf-2056a4d4047e"),
                            ProductId = new Guid("8d28269f-0ceb-4a08-ac80-0216e591d1b2")
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = new Guid("1ddb8031-20bf-42a1-b309-04b0ab613aae"),
                            ProductId = new Guid("0c7a4ae7-0b39-4cde-b094-15cde554e47f")
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = new Guid("1ddb8031-20bf-42a1-b309-04b0ab613aae"),
                            ProductId = new Guid("ad17c611-b992-4122-ab8c-ea663e3b651f")
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = new Guid("1ddb8031-20bf-42a1-b309-04b0ab613aae"),
                            ProductId = new Guid("d25aeb5e-bb2b-436f-b3c2-780bc7f73a14")
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = new Guid("ef251957-ad4e-49b8-bf26-3003f6219904"),
                            ProductId = new Guid("399724bb-1ac0-45ce-8c71-71b879636a9b")
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = new Guid("ef251957-ad4e-49b8-bf26-3003f6219904"),
                            ProductId = new Guid("575ccf27-1107-4dcb-9a9d-62450a4ca6da")
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = new Guid("ef251957-ad4e-49b8-bf26-3003f6219904"),
                            ProductId = new Guid("66d1db62-597b-435f-8d2b-dfb03e413c57")
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = new Guid("0bf0847b-d6b4-4db7-b484-b26df76fb28a"),
                            ProductId = new Guid("4b2b4004-2b1e-4757-89cd-79f099f945d6")
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = new Guid("0bf0847b-d6b4-4db7-b484-b26df76fb28a"),
                            ProductId = new Guid("2560c15e-6c45-4244-8cef-a0c88a244c23")
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = new Guid("0bf0847b-d6b4-4db7-b484-b26df76fb28a"),
                            ProductId = new Guid("76d94a0d-5c49-45a0-a4c3-78bc9c8c69e4")
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Products.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasMaxLength(4)
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fa4ec16-d4b7-4911-8c27-ddafbeba3bca"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2802),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Smartphone Samsung Galaxy S22",
                            Price = 525m,
                            Stock = 255,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("a91470f3-d7eb-401d-9748-42b1eac343d8"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2837),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Laptop HP Pavilion 16",
                            Price = 1500m,
                            Stock = 210,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bf6d0c96-1b7f-4c32-88ab-9386285ac732"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2850),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Auriculares inalámbricos Sony WH-1000XM4",
                            Price = 120m,
                            Stock = 520,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b6b8357d-da2b-4b01-8aaf-1cd2821cfeef"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2855),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Camiseta de algodón con estampado floral",
                            Price = 40m,
                            Stock = 41,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("52587219-25e8-4b74-8a90-5f566db822b4"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2859),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Pantalones vaqueros de corte ajustado",
                            Price = 25m,
                            Stock = 210,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9f4e3e8a-d329-4035-b9b5-aed7134e010f"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2867),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Bolso de cuero genuino con diseño elegante",
                            Price = 30m,
                            Stock = 50,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("b6d4f303-dd86-4b13-8fef-5da04206dc6c"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2872),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de muebles de sala en tonos neutros",
                            Price = 720m,
                            Stock = 78,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8c6e6381-308d-47e3-b03d-c00c05e60829"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2877),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de sábanas de algodón con diseño moderno",
                            Price = 255m,
                            Stock = 39,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e6eece15-e7b2-4baa-a6a3-fb0ad481dede"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2881),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Lámpara de mesa de estilo industrial",
                            Price = 120m,
                            Stock = 55,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1ec7f116-cc7c-4450-aa87-792ac4b5ad6a"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2888),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Set de maquillaje profesional de alta gama",
                            Price = 156m,
                            Stock = 52,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("fb4ea868-30ca-4e5f-8343-1dec213682a5"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2898),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Perfume floral y fresco para mujer",
                            Price = 85m,
                            Stock = 75,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9855e282-fbbf-48da-b4c7-28360a4d289a"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(2903),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Cepillo alisador de cabello con tecnología iónica",
                            Price = 175m,
                            Stock = 19,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("1be672cd-3664-4055-93cc-e59422fed135"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3133),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Bicicleta de montaña todoterreno",
                            Price = 350m,
                            Stock = 98,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0b535a49-8f14-4cc9-b707-4ae6e0d0470d"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3138),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Ropa deportiva para running, incluye camiseta y pantalones cortos",
                            Price = 355m,
                            Stock = 64,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("bd89d1ab-d43e-4030-81be-80bafd9db27f"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3143),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Tienda de campaña resistente al agua para 4 personas",
                            Price = 423m,
                            Stock = 27,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("134e84f1-decc-47d3-ae86-022a304218db"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3148),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de construcción LEGO Classic",
                            Price = 135m,
                            Stock = 155,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d0584496-48ac-42f3-bf12-cb76b464af97"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3153),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Peluche suave y tierno de animalito",
                            Price = 45m,
                            Stock = 525,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("65c76211-bc25-4bc6-9c5a-8b7139dd851a"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3162),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Juego de mesa estratégico \"Catan\"",
                            Price = 120m,
                            Stock = 85,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e5daabef-d638-40c6-8278-8fdff3860b4c"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3173),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Novela de suspenso \"La Chica del Tren\" de Paula Hawkins",
                            Price = 25m,
                            Stock = 320,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("850b80ad-b010-42ac-9315-a472aae8f68a"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3178),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "CD de la banda sonora original de una película popular",
                            Price = 21m,
                            Stock = 485,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("8d28269f-0ceb-4a08-ac80-0216e591d1b2"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3183),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Videojuego de aventuras \"The Legend of Zelda: Breath of the Wild\"",
                            Price = 55m,
                            Stock = 785,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0c7a4ae7-0b39-4cde-b094-15cde554e47f"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3188),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Selección de chocolates gourmet de diferentes países",
                            Price = 12m,
                            Stock = 528,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ad17c611-b992-4122-ab8c-ea663e3b651f"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3192),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Caja de té variado con sabores exóticos",
                            Price = 25m,
                            Stock = 740,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d25aeb5e-bb2b-436f-b3c2-780bc7f73a14"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3197),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Vino tinto reserva de una bodega reconocida",
                            Price = 128m,
                            Stock = 196,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("399724bb-1ac0-45ce-8c71-71b879636a9b"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3201),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Set de suplementos vitamínicos para la salud general",
                            Price = 129m,
                            Stock = 504,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("575ccf27-1107-4dcb-9a9d-62450a4ca6da"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3206),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Dispositivo de seguimiento de actividad física y sueño",
                            Price = 98m,
                            Stock = 127,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("66d1db62-597b-435f-8d2b-dfb03e413c57"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3215),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Mascarilla facial de cuidado intensivo con ingredientes naturales",
                            Price = 234m,
                            Stock = 529,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("4b2b4004-2b1e-4757-89cd-79f099f945d6"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3220),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Kit de limpieza y cuidado automotriz de calidad profesional",
                            Price = 359m,
                            Stock = 74,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2560c15e-6c45-4244-8cef-a0c88a244c23"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3225),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Funda de asiento de cuero para automóvil",
                            Price = 75m,
                            Stock = 56,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("76d94a0d-5c49-45a0-a4c3-78bc9c8c69e4"),
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 32, 145, DateTimeKind.Utc).AddTicks(3238),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            IsDeleted = false,
                            IsUpdated = false,
                            Name = "Casco de motocicleta de diseño aerodinámico y alta seguridad",
                            Price = 125m,
                            Stock = 142,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.TempCartItems.Domain.TempCartItem", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<Guid>("TempUser")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("TempCartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeleteAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cfbef3a1-333e-484f-b6ce-4f3f5d6c63ce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9bbd3535-4c2c-4590-ab22-fac16c498cb5",
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 31, 802, DateTimeKind.Utc).AddTicks(8129),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Luis@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Luis",
                            IsDeleted = false,
                            IsUpdated = false,
                            LastName = "Caceres",
                            LockoutEnabled = true,
                            NormalizedEmail = "LUIS@MAIL.COM",
                            NormalizedUserName = "LUIS@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFQfGFfpPcCCHshDUiT37yakLx9K66Fpf4LnuRrVZeyw/5QglwwH3WIHOvjFZUHE0Q==",
                            PhoneNumber = "7588-5214",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d6d0cb6-0e8f-4f65-8a64-6c9c26852151",
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Luis@mail.com"
                        },
                        new
                        {
                            Id = "9ca44540-450e-4c48-97c9-df5ab5ee88ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "472b8a87-3bd1-4bad-9893-4e37a1723277",
                            CreateAt = new DateTime(2023, 9, 3, 23, 41, 31, 802, DateTimeKind.Utc).AddTicks(8295),
                            DeleteAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Steven@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Steven",
                            IsDeleted = false,
                            IsUpdated = false,
                            LastName = "Caceres",
                            LockoutEnabled = true,
                            NormalizedEmail = "STEVEN@MAIL.COM",
                            NormalizedUserName = "STEVEN@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ8ED7UihyrnSuaw/w2Lu+DmKYtZYaKgaLduWOfbeSfX8jsxmf7vLKTkXLhZX75lnw==",
                            PhoneNumber = "7588-5214",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "779773c2-e31f-4b6d-b568-0cfb87697193",
                            TwoFactorEnabled = false,
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserName = "Steven@mail.com"
                        });
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserAddres", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressSpecific")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAddres");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExpiredDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerCard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesSystem.Modules.Buys.Domain.Buy", b =>
                {
                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("Buys")
                        .HasForeignKey("ProductId");

                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.CartItems.Domain.CartItem", b =>
                {
                    b.HasOne("SalesSystem.Modules.Carts.Domain.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("SalesSystem.Modules.Carts.Domain.Cart", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.Images.Domain.Image", b =>
                {
                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("SalesSystem.Modules.ProductCategories.Domain.ProductCategory", b =>
                {
                    b.HasOne("SalesSystem.Modules.Categories.Domain.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId");

                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.TempCartItems.Domain.TempCartItem", b =>
                {
                    b.HasOne("SalesSystem.Modules.Products.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserAddres", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("UserAddres")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.UserCard", b =>
                {
                    b.HasOne("SalesSystem.Modules.Users.Domain.Entities.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesSystem.Modules.Carts.Domain.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SalesSystem.Modules.Categories.Domain.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SalesSystem.Modules.Products.Domain.Product", b =>
                {
                    b.Navigation("Buys");

                    b.Navigation("CartItems");

                    b.Navigation("Images");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("SalesSystem.Modules.Users.Domain.Entities.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("UserAddres");

                    b.Navigation("UserCards");
                });
#pragma warning restore 612, 618
        }
    }
}
